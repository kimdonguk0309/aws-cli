aws ec2 create-vpc --cidr-block 10.0.0.0/16 --tag-specifications ResourceTypr=vpc,Tags=[{Key=Name,Value=MyVpc}]

aws ec2 create-subnet --vpc-id vpc-xxx --cidr-block 10.0.0.0/24 --tag-specifications ResourceTypr=subnet,Tags=[{Key=Name,Value=MySubent}]

###############################
#!/bin/bash

# VPC 생성
echo "Creating VPC..."
VPC_ID=$(aws ec2 create-vpc \
  --cidr-block 10.0.0.0/16 \
  --tag-specifications 'ResourceType=vpc,Tags=[{Key=Name,Value=MyVpc}]' \
  --query 'Vpc.VpcId' \
  --output text)

echo "VPC created with ID: $VPC_ID"

# Subnet 생성
echo "Creating Subnet..."
SUBNET_ID=$(aws ec2 create-subnet \
  --vpc-id "$VPC_ID" \
  --cidr-block 10.0.0.0/24 \
  --tag-specifications 'ResourceType=subnet,Tags=[{Key=Name,Value=MySubnet}]' \
  --query 'Subnet.SubnetId' \
  --output text)

echo "Subnet created with ID: $SUBNET_ID"
##############################



#!/bin/bash
# Usage: ./setup_vpc_ec2.sh <VPC_CIDR> <PUB_SUBNET_CIDR> <PRIV_SUBNET_CIDR> <KEY_NAME> <AMI_ID> <INSTANCE_TYPE>

VPC_CIDR="$1"
PUB_CIDR="$2"
PRIV_CIDR="$3"
KEY_NAME="$4"
AMI_ID="$5"
INSTANCE_TYPE="$6"

if [[ $# -ne 6 ]]; then
  echo "Usage: $0 <VPC_CIDR> <PUB_SUBNET_CIDR> <PRIV_SUBNET_CIDR> <KEY_NAME> <AMI_ID> <INSTANCE_TYPE>"
  exit 1
fi

# 1️⃣ VPC 생성
VPC_ID=$(aws ec2 create-vpc \
  --cidr-block "$VPC_CIDR" \
  --query 'Vpc.VpcId' \
  --output text)
aws ec2 modify-vpc-attribute --vpc-id "$VPC_ID" --enable-dns-hostnames "{\"Value\":true}"
aws ec2 modify-vpc-attribute --vpc-id "$VPC_ID" --enable-dns-support "{\"Value\":true}"
echo "✔️ VPC created: $VPC_ID"

# 2️⃣ 서브넷 생성 (공용 및 사설)
PUB_SUBNET=$(aws ec2 create-subnet \
  --vpc-id "$VPC_ID" \
  --cidr-block "$PUB_CIDR" \
  --query 'Subnet.SubnetId' --output text)
aws ec2 modify-subnet-attribute --subnet-id "$PUB_SUBNET" --map-public-ip-on-launch
PRIV_SUBNET=$(aws ec2 create-subnet \
  --vpc-id "$VPC_ID" \
  --cidr-block "$PRIV_CIDR" \
  --query 'Subnet.SubnetId' --output text)
echo "✔️ Subnets created: Public=$PUB_SUBNET, Private=$PRIV_SUBNET"

# 3️⃣ Internet Gateway 생성 및 Attach
IGW=$(aws ec2 create-internet-gateway --query 'InternetGateway.InternetGatewayId' --output text)
aws ec2 attach-internet-gateway --vpc-id "$VPC_ID" --internet-gateway-id "$IGW"
echo "✔️ IGW created and attached: $IGW"

# 4️⃣ Route Table 생성 및 IGW에 라우팅 추가
RTB=$(aws ec2 create-route-table --vpc-id "$VPC_ID" --query 'RouteTable.RouteTableId' --output text)
aws ec2 create-route --route-table-id "$RTB" --destination-cidr-block 0.0.0.0/0 --gateway-id "$IGW"
aws ec2 associate-route-table --subnet-id "$PUB_SUBNET" --route-table-id "$RTB"
echo "✔️ RouteTable created and associated to public subnet"

# 5️⃣ Security Group 생성
SG=$(aws ec2 create-security-group \
  --group-name "${VPC_ID}-sg" \
  --description "VPC-wide SG" \
  --vpc-id "$VPC_ID" \
  --query 'GroupId' --output text)
aws ec2 authorize-security-group-ingress \
  --group-id "$SG" \
  --protocol tcp \
  --port 22 0.0.0.0/0
echo "✔️ Security Group created: $SG"

# 6️⃣ EC2 인스턴스 생성 (공용 서브넷에 배포)
INSTANCE_ID=$(aws ec2 run-instances \
  --image-id "$AMI_ID" \
  --instance-type "$INSTANCE_TYPE" \
  --key-name "$KEY_NAME" \
  --security-group-ids "$SG" \
  --subnet-id "$PUB_SUBNET" \
  --query 'Instances[0].InstanceId' \
  --output text)
echo "✔️ EC2 Instance launched: $INSTANCE_ID"

# 7️⃣ Elastic IP 생성 및 연결
ALLOCATION_ID=$(aws ec2 allocate-address --domain vpc --query 'AllocationId' --output text)
aws ec2 associate-address --instance-id "$INSTANCE_ID" --allocation-id "$ALLOCATION_ID"
echo "✔️ EIP allocated and associated"

# 8️⃣ 인스턴스 상태 확인 및 태그 지정
aws ec2 wait instance-running --instance-ids "$INSTANCE_ID"
aws ec2 create-tags --resources "$VPC_ID" "$PUB_SUBNET" "$PRIV_SUBNET" "$IGW" "$RTB" "$SG" "$INSTANCE_ID" \
  --tags Key=Name,Value=MyVPC Key=Env,Value=Dev
echo "🏷️ All resources tagged"

# 9️⃣ 접속 정보 
PUB_IP=$(aws ec2 describe-instances \
  --instance-ids "$INSTANCE_ID" \
  --query 'Reservations[0].Instances[0].PublicIpAddress' \
  --output text)
echo "🔐 SSH: ssh -i ${KEY_NAME}.pem ec2-user@${PUB_IP}"

